# -*- coding: utf-8 -*-"""The MIT LicenseCopyright (c) 2011 t.163.comPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE."""from t4py.http.request_handler import RequestHandlerfrom tblog_exception import TBlogExceptionimport reclass TBlog(object):    """Tiny blog API wrapper"""    def __init__(self, consumer_key, consumer_secret):        self._request_handler = RequestHandler(consumer_key, consumer_secret)        @staticmethod    def _prepare_request(url, parameters={}, possible_paras=[]):        for key in parameters.keys():            if key not in possible_paras:                raise TBlogException('parameter "%s" is not expected.' % key)            parameters[key] = str(parameters[key])        re_must_path_template = re.compile('\{(\w+)\}')        must_paths = re_must_path_template.findall(url)        for must_path in must_paths:            replace_path = parameters.get(must_path, '')            if replace_path == '':                raise TBlogException('parameter "%s" is required.' % must_path)            print must_path            print replace_path            print url            url = url.replace('{%s}'%must_path, replace_path)            del parameters[must_path]                re_possible_path_template = re.compile('\[(\w+)\]')        possible_paths = re_possible_path_template.findall(url)        for possible_path in possible_paths:            replace_path = parameters.get(possible_path, '')            if replace_path == '':                url = url.replace('/[%s]'%possible_path, '')            else:                url = url.replace('[%s]'%possible_path, replace_path)                del parameters[possible_path]        return url, parameters        def get_auth_url(self, callback_url=None):        return self._request_handler.get_auth_url(callback_url)        def get_request_token(self):        return self._request_handler.get_request_token()        def get_access_token(self,pin):        return self._request_handler.get_access_token(pin)        def update_access_token(self, pin):        return self._request_handler.update_access_token(pin)        #获取当前登录用户关注用户的最新微博列表(statuses/home_timeline)    #http://open.t.163.com/wiki/index.php?title=获取当前登录用户关注用户的最新微博列表(statuses/home_timeline)    def statuses_home_timeline(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/home_timeline.json', parameters, ['count' ,'since_id' ,'max_id' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前登录用户关注用户的最新微博列表(statuses/home_timeline)    #http://open.t.163.com/wiki/index.php?title=获取当前登录用户关注用户的最新微博列表(statuses/home_timeline)    def statuses_public_timeline(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/public_timeline.json', parameters, ['trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前登录用户关注用户的最新微博列表(statuses/home_timeline)    #http://open.t.163.com/wiki/index.php?title=获取当前登录用户关注用户的最新微博列表(statuses/home_timeline)    def statuses_mentions(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/mentions.json', parameters, ['count' ,'since_id' ,'max_id' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前登录用户关注用户的最新微博列表(statuses/home_timeline)    #http://open.t.163.com/wiki/index.php?title=获取当前登录用户关注用户的最新微博列表(statuses/home_timeline)    def statuses_user_timeline(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/user_timeline.json', parameters, ['user_id' ,'screen_name' ,'name' ,'count' ,'since_id' ,'max_id' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前登录用户所发微博被转发的列表(statuses/retweets_of_me)    #http://open.t.163.com/wiki/index.php?title=获取当前登录用户所发微博被转发的列表(statuses/retweets_of_me)    def statuses_retweets_of_me(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/retweets_of_me.json', parameters, ['count' ,'since_id'])        return self._request_handler.send_request(url, 'GET', paras)        #获取我发出的评论列表(/statuses/comments_by_me)    #http://open.t.163.com/wiki/index.php?title=获取我发出的评论列表(/statuses/comments_by_me)    def statuses_comments_by_me(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/comments_by_me.json', parameters, ['count' ,'since_id' ,'max_id' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取我收到的评论列表(/statuses/comments_to_me)    #http://open.t.163.com/wiki/index.php?title=获取我收到的评论列表(/statuses/comments_to_me)    def statuses_comments_to_me(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/comments_to_me.json', parameters, ['count' ,'since_id' ,'max_id' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #发布一条新微博(statuses/update)    #http://open.t.163.com/wiki/index.php?title=发布一条新微博(statuses/update)    def statuses_update(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/update.json', parameters, ['status' ,'lat' ,'long' ,'vid'])        return self._request_handler.send_request(url, 'POST', paras)        #评论一条微博(statuses/reply)    #http://open.t.163.com/wiki/index.php?title=评论一条微博(statuses/reply)    def statuses_reply(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/reply.json', parameters, ['id' ,'status' ,'is_retweet' ,'is_comment_to_root'])        return self._request_handler.send_request(url, 'POST', paras)        #转发一条微博(statuses/retweet)    #http://open.t.163.com/wiki/index.php?title=转发一条微博(statuses/retweet)    def statuses_retweet(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/retweet/{id}.json', parameters, ['id' ,'status' ,'is_comment' ,'is_comment_to_root'])        return self._request_handler.send_request(url, 'POST', paras)        #获取指定微博信息(statuses/show)    #http://open.t.163.com/wiki/index.php?title=获取指定微博信息(statuses/show)    def statuses_show(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/show/{id}.json', parameters, ['id'])        return self._request_handler.send_request(url, 'GET', paras)        #删除指定的微博(statuses/destroy)    #http://open.t.163.com/wiki/index.php?title=删除指定的微博(statuses/destroy)    def statuses_destroy(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/destroy/{id}.json', parameters, ['id'])        return self._request_handler.send_request(url, 'POST', paras)        #获取指定微博的评论列表(statuses/comments)    #http://open.t.163.com/wiki/index.php?title=获取指定微博的评论列表(statuses/comments)    def statuses_comments(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/comments/{id}.json', parameters, ['id','count' ,'since_id' ,'max_id' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取指定微博的转发列表(statuses/retweets)    #http://open.t.163.com/wiki/index.php?title=获取指定微博的转发列表(statuses/retweets)    def statuses_retweets(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/retweets/{id}.json', parameters, ['id' ,'count' ,'since_id' ,'max_id' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取一条微博被转发的信息(statuses/id/retweeted_by)    #http://open.t.163.com/wiki/index.php?title=获取一条微博被转发的信息(statuses/id/retweeted_by)    def statuses_id(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/id/retweeted_by.json', parameters, ['id' ,'count'])        return self._request_handler.send_request(url, 'GET', paras)        #上传图片(statuses/upload)    #http://open.t.163.com/wiki/index.php?title=上传图片(statuses/upload)    def statuses_upload(self, file_name):        url, paras = TBlog._prepare_request('/statuses/upload.json', {}, [])        return self._request_handler.send_upload_image_request(url, 'POST', file_name, contentname='pic', parameters=paras)        #获取指定用户的信息(users/show)    #http://open.t.163.com/wiki/index.php?title=获取指定用户的信息(users/show)    def users_show(self, parameters={}):        url, paras = TBlog._prepare_request('/users/show.json', parameters, ['id' ,'name' ,'user_id' ,'screen_name'])        return self._request_handler.send_request(url, 'GET', paras)        #获取指定用户的关注列表(statuses/friends)    #http://open.t.163.com/wiki/index.php?title=获取指定用户的关注列表(statuses/friends)    def statuses_friends(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/friends.json', parameters, ['user_id' ,'screen_name' ,'cursor'])        return self._request_handler.send_request(url, 'GET', paras)        #获取指定用户的被关注列表(statuses/followers)    #http://open.t.163.com/wiki/index.php?title=获取指定用户的被关注列表(statuses/followers)    def statuses_followers(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/followers.json', parameters, ['user_id' ,'screen_name' ,'cursor'])        return self._request_handler.send_request(url, 'GET', paras)        #猜你喜欢(users/suggestions)    #http://open.t.163.com/wiki/index.php?title=猜你喜欢(users/suggestions)    def users_suggestions(self, parameters={}):        url, paras = TBlog._prepare_request('/users/suggestions.json', parameters, ['count' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取推荐I达人列表(users/suggestions_i_followers)    #http://open.t.163.com/wiki/index.php?title=获取推荐I达人列表(users/suggestions_i_followers)    def users_suggestions_i_followers(self, parameters={}):        url, paras = TBlog._prepare_request('/users/suggestions_i_followers.json', parameters, ['cursor' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前用户的关注人名字列表(friends/names)    #http://open.t.163.com/wiki/index.php?title=获取当前用户的关注人名字列表(friends/names)    def friends_names(self, parameters={}):        url, paras = TBlog._prepare_request('/friends/names.json', parameters, [''])        return self._request_handler.send_request(url, 'GET', paras)        #关注指定用户(friendships/create)    #http://open.t.163.com/wiki/index.php?title=关注指定用户(friendships/create)    def friendships_create(self, parameters={}):        url, paras = TBlog._prepare_request('/friendships/create.json', parameters, ['user_id' ,'screen_name'])        return self._request_handler.send_request(url, 'POST', paras)        #取消关注指定用户(friendships/destroy)    #http://open.t.163.com/wiki/index.php?title=取消关注指定用户(friendships/destroy)    def friendships_destroy(self, parameters={}):        url, paras = TBlog._prepare_request('/friendships/destroy.json', parameters, ['user_id' ,'screen_name'])        return self._request_handler.send_request(url, 'POST', paras)        #获取两个用户的相互关注关系(friendships/show)    #http://open.t.163.com/wiki/index.php?title=获取两个用户的相互关注关系(friendships/show)    def friendships_show(self, parameters={}):        url, paras = TBlog._prepare_request('/friendships/show.json', parameters, ['source_id' ,'source_screen_name' ,'target_id' ,'target_screen_name'])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前的热门转发榜(statuses/topRetweets)    #http://open.t.163.com/wiki/index.php?title=获取当前的热门转发榜(statuses/topRetweets)    def statuses_topRetweets(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/topRetweets/[type].json', parameters, ['type' ,'size'])        return self._request_handler.send_request(url, 'GET', paras)        #推荐话题(trends/recommended)    #http://open.t.163.com/wiki/index.php?title=推荐话题(trends/recommended)    def trends_recommended(self, parameters={}):        url, paras = TBlog._prepare_request('/trends/recommended.json', parameters, [''])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前用户私信列表(direct_messages)    #http://open.t.163.com/wiki/index.php?title=获取当前用户私信列表(direct_messages)    def direct_messages(self, parameters={}):        url, paras = TBlog._prepare_request('/direct_messages.json', parameters, ['since_id' ,'count'])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前用户发送的私信列表(direct_messages/sent)    #http://open.t.163.com/wiki/index.php?title=获取当前用户发送的私信列表(direct_messages/sent)    def direct_messages_sent(self, parameters={}):        url, paras = TBlog._prepare_request('/direct_messages/sent.json', parameters, ['since_id' ,'count'])        return self._request_handler.send_request(url, 'GET', paras)        #发送一条私信(direct_messages/new)    #http://open.t.163.com/wiki/index.php?title=发送一条私信(direct_messages/new)    def direct_messages_new(self, parameters={}):        url, paras = TBlog._prepare_request('/direct_messages/new.json', parameters, ['user' ,'text'])        return self._request_handler.send_request(url, 'POST', paras)        #删除一条私信(direct_messages/destroy)    #http://open.t.163.com/wiki/index.php?title=删除一条私信(direct_messages/destroy)    def direct_messages_destroy(self, parameters={}):        url, paras = TBlog._prepare_request('/direct_messages/destroy/{id}.json', parameters, ['id'])        return self._request_handler.send_request(url, 'POST', paras)        #开通微博(account/activate)    #http://open.t.163.com/wiki/index.php?title=开通微博(account/activate)    def account_activate(self, parameters={}):        url, paras = TBlog._prepare_request('/account/activate.json', parameters, ['nick_name' ,'real_name' ,'mobile' ,'id_num'])        return self._request_handler.send_request(url, 'POST', paras)        #修改用户个人资料(account/update_profile)    #http://open.t.163.com/wiki/index.php?title=修改用户个人资料(account/update_profile)    def account_update_profile(self, parameters={}):        url, paras = TBlog._prepare_request('/account/update_profile.json', parameters, ['nick_name' ,'real_name' ,'description' ,'province' ,'city'])        return self._request_handler.send_request(url, 'POST', paras)        #修改用户个人头像(account/update_profile_image)    #http://open.t.163.com/wiki/index.php?title=修改用户个人头像(account/update_profile_image)    def account_update_profile_image(self, file_name):        url, paras = TBlog._prepare_request('/account/update_profile_image.json', {}, [])        return self._request_handler.send_upload_image_request(url, 'POST', file_name, contentname='image', parameters=paras)        #判断当前用户是否验证成功并返回该用户信息(account/verify_credentials)    #http://open.t.163.com/wiki/index.php?title=判断当前用户是否验证成功并返回该用户信息(account/verify_credentials)    def account_verify_credentials(self, parameters={}):        url, paras = TBlog._prepare_request('/account/verify_credentials.json', parameters, [''])        return self._request_handler.send_request(url, 'GET', paras)        #返回当前登录用户未读的消息数量(reminds/message/latest)    #http://open.t.163.com/wiki/index.php?title=返回当前登录用户未读的消息数量(reminds/message/latest)    def reminds_message(self, parameters={}):        url, paras = TBlog._prepare_request('/reminds/message/latest.json', parameters, [''])        return self._request_handler.send_request(url, 'GET', paras)        #获取当前用户API访问频率限制(account/rate_limit_status)    #http://open.t.163.com/wiki/index.php?title=获取当前用户API访问频率限制(account/rate_limit_status)    def account_rate_limit_status(self, parameters={}):        url, paras = TBlog._prepare_request('/account/rate_limit_status.json', parameters, [''])        return self._request_handler.send_request(url, 'GET', paras)        #获取指定用户的收藏列表 (favorites)    #http://open.t.163.com/wiki/index.php?title=获取指定用户的收藏列表 (favorites)    def favorites(self, parameters={}):        url, paras = TBlog._prepare_request('/favorites/{id}.json', parameters, ['id' ,'count' ,'since_id'])        return self._request_handler.send_request(url, 'GET', paras)        #添加收藏(favorites/create)    #http://open.t.163.com/wiki/index.php?title=添加收藏(favorites/create)    def favorites_create(self, parameters={}):        url, paras = TBlog._prepare_request('/favorites/create/{id}.json', parameters, ['id'])        return self._request_handler.send_request(url, 'POST', paras)        #删除当前用户的收藏(favorites/destroy)    #http://open.t.163.com/wiki/index.php?title=删除当前用户的收藏(favorites/destroy)    def favorites_destroy(self, parameters={}):        url, paras = TBlog._prepare_request('/favorites/destroy/{id}.json', parameters, ['id'])        return self._request_handler.send_request(url, 'POST', paras)        #阻止指定用户(blocks/create)    #http://open.t.163.com/wiki/index.php?title=阻止指定用户(blocks/create)    def blocks_create(self, parameters={}):        url, paras = TBlog._prepare_request('/blocks/create.json', parameters, ['user_id' ,'screen_name'])        return self._request_handler.send_request(url, 'POST', paras)        #取消已阻止的用户(blocks/destroy)    #http://open.t.163.com/wiki/index.php?title=取消已阻止的用户(blocks/destroy)    def blocks_destroy(self, parameters={}):        url, paras = TBlog._prepare_request('/blocks/destroy.json', parameters, ['user_id' ,'screen_name'])        return self._request_handler.send_request(url, 'POST', paras)        #判断指定用户是否已被阻止(blocks/exists)    #http://open.t.163.com/wiki/index.php?title=判断指定用户是否已被阻止(blocks/exists)    def blocks_exists(self, parameters={}):        url, paras = TBlog._prepare_request('/blocks/exists.json', parameters, ['user_id' ,'screen_name'])        return self._request_handler.send_request(url, 'GET', paras)        #查看已阻止的用户列表(blocks/blocking)    #http://open.t.163.com/wiki/index.php?title=查看已阻止的用户列表(blocks/blocking)    def blocks_blocking(self, parameters={}):        url, paras = TBlog._prepare_request('/blocks/blocking.json', parameters, [''])        return self._request_handler.send_request(url, 'GET', paras)        #查看已阻止的用户列表id数组(blocks/blocking/ids)    #http://open.t.163.com/wiki/index.php?title=查看已阻止的用户列表id数组(blocks/blocking/ids)    def blocks_blocking_ids(self, parameters={}):        url, paras = TBlog._prepare_request('/blocks/blocking/ids.json', parameters, [''])        return self._request_handler.send_request(url, 'GET', paras)        #获取地点列表(/location/venues)    #http://open.t.163.com/wiki/index.php?title=获取地点列表(/location/venues)    def location_venues(self, parameters={}):        url, paras = TBlog._prepare_request('/location/venues.json', parameters, ['lat' ,'long' ,'count' ,'q'])        return self._request_handler.send_request(url, 'GET', paras)        #获取与地理位置相关的微博列表(/statuses/location_timeline)    #http://open.t.163.com/wiki/index.php?title=获取与地理位置相关的微博列表(/statuses/location_timeline)    def statuses_location_timeline(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/location_timeline.json', parameters, ['lat' ,'long' ,'vid' ,'count' ,'since_id' ,'max_id'])        return self._request_handler.send_request(url, 'GET', paras)        #搜索微博(search)    #http://open.t.163.com/wiki/index.php?title=搜索微博(search)    def search(self, parameters={}):        url, paras = TBlog._prepare_request('/search.json', parameters, ['q' ,'page' ,'per_page'])        return self._request_handler.send_request(url, 'GET', paras)        #搜索微博new(statuses/search)    #http://open.t.163.com/wiki/index.php?title=搜索微博new(statuses/search)    def statuses_search(self, parameters={}):        url, paras = TBlog._prepare_request('/statuses/search.json', parameters, ['q' ,'page' ,'per_page' ,'trim_user'])        return self._request_handler.send_request(url, 'GET', paras)        #搜索用户(users/search)    #http://open.t.163.com/wiki/index.php?title=搜索用户(users/search)    def users_search(self, parameters={}):        url, paras = TBlog._prepare_request('/users/search.json', parameters, ['q' ,'page' ,'per_page'])        return self._request_handler.send_request(url, 'GET', paras)